/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/smoothscroll-polyfill";
exports.ids = ["vendor-chunks/smoothscroll-polyfill"];
exports.modules = {

/***/ "(ssr)/./node_modules/smoothscroll-polyfill/dist/smoothscroll.js":
/*!*****************************************************************!*\
  !*** ./node_modules/smoothscroll-polyfill/dist/smoothscroll.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("/* smoothscroll v0.4.4 - 2019 - Dustan Kasten, Jeremias Menichelli - MIT License */ (function() {\n    \"use strict\";\n    // polyfill\n    function polyfill() {\n        // aliases\n        var w = window;\n        var d = document;\n        // return if scroll behavior is supported and polyfill is not forced\n        if (\"scrollBehavior\" in d.documentElement.style && w.__forceSmoothScrollPolyfill__ !== true) {\n            return;\n        }\n        // globals\n        var Element = w.HTMLElement || w.Element;\n        var SCROLL_TIME = 468;\n        // object gathering original scroll methods\n        var original = {\n            scroll: w.scroll || w.scrollTo,\n            scrollBy: w.scrollBy,\n            elementScroll: Element.prototype.scroll || scrollElement,\n            scrollIntoView: Element.prototype.scrollIntoView\n        };\n        // define timing method\n        var now = w.performance && w.performance.now ? w.performance.now.bind(w.performance) : Date.now;\n        /**\n     * indicates if a the current browser is made by Microsoft\n     * @method isMicrosoftBrowser\n     * @param {String} userAgent\n     * @returns {Boolean}\n     */ function isMicrosoftBrowser(userAgent) {\n            var userAgentPatterns = [\n                \"MSIE \",\n                \"Trident/\",\n                \"Edge/\"\n            ];\n            return new RegExp(userAgentPatterns.join(\"|\")).test(userAgent);\n        }\n        /*\n     * IE has rounding bug rounding down clientHeight and clientWidth and\n     * rounding up scrollHeight and scrollWidth causing false positives\n     * on hasScrollableSpace\n     */ var ROUNDING_TOLERANCE = isMicrosoftBrowser(w.navigator.userAgent) ? 1 : 0;\n        /**\n     * changes scroll position inside an element\n     * @method scrollElement\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {undefined}\n     */ function scrollElement(x, y) {\n            this.scrollLeft = x;\n            this.scrollTop = y;\n        }\n        /**\n     * returns result of applying ease math function to a number\n     * @method ease\n     * @param {Number} k\n     * @returns {Number}\n     */ function ease(k) {\n            return 0.5 * (1 - Math.cos(Math.PI * k));\n        }\n        /**\n     * indicates if a smooth behavior should be applied\n     * @method shouldBailOut\n     * @param {Number|Object} firstArg\n     * @returns {Boolean}\n     */ function shouldBailOut(firstArg) {\n            if (firstArg === null || typeof firstArg !== \"object\" || firstArg.behavior === undefined || firstArg.behavior === \"auto\" || firstArg.behavior === \"instant\") {\n                // first argument is not an object/null\n                // or behavior is auto, instant or undefined\n                return true;\n            }\n            if (typeof firstArg === \"object\" && firstArg.behavior === \"smooth\") {\n                // first argument is an object and behavior is smooth\n                return false;\n            }\n            // throw error when behavior is not supported\n            throw new TypeError(\"behavior member of ScrollOptions \" + firstArg.behavior + \" is not a valid value for enumeration ScrollBehavior.\");\n        }\n        /**\n     * indicates if an element has scrollable space in the provided axis\n     * @method hasScrollableSpace\n     * @param {Node} el\n     * @param {String} axis\n     * @returns {Boolean}\n     */ function hasScrollableSpace(el, axis) {\n            if (axis === \"Y\") {\n                return el.clientHeight + ROUNDING_TOLERANCE < el.scrollHeight;\n            }\n            if (axis === \"X\") {\n                return el.clientWidth + ROUNDING_TOLERANCE < el.scrollWidth;\n            }\n        }\n        /**\n     * indicates if an element has a scrollable overflow property in the axis\n     * @method canOverflow\n     * @param {Node} el\n     * @param {String} axis\n     * @returns {Boolean}\n     */ function canOverflow(el, axis) {\n            var overflowValue = w.getComputedStyle(el, null)[\"overflow\" + axis];\n            return overflowValue === \"auto\" || overflowValue === \"scroll\";\n        }\n        /**\n     * indicates if an element can be scrolled in either axis\n     * @method isScrollable\n     * @param {Node} el\n     * @param {String} axis\n     * @returns {Boolean}\n     */ function isScrollable(el) {\n            var isScrollableY = hasScrollableSpace(el, \"Y\") && canOverflow(el, \"Y\");\n            var isScrollableX = hasScrollableSpace(el, \"X\") && canOverflow(el, \"X\");\n            return isScrollableY || isScrollableX;\n        }\n        /**\n     * finds scrollable parent of an element\n     * @method findScrollableParent\n     * @param {Node} el\n     * @returns {Node} el\n     */ function findScrollableParent(el) {\n            while(el !== d.body && isScrollable(el) === false){\n                el = el.parentNode || el.host;\n            }\n            return el;\n        }\n        /**\n     * self invoked function that, given a context, steps through scrolling\n     * @method step\n     * @param {Object} context\n     * @returns {undefined}\n     */ function step(context) {\n            var time = now();\n            var value;\n            var currentX;\n            var currentY;\n            var elapsed = (time - context.startTime) / SCROLL_TIME;\n            // avoid elapsed times higher than one\n            elapsed = elapsed > 1 ? 1 : elapsed;\n            // apply easing to elapsed time\n            value = ease(elapsed);\n            currentX = context.startX + (context.x - context.startX) * value;\n            currentY = context.startY + (context.y - context.startY) * value;\n            context.method.call(context.scrollable, currentX, currentY);\n            // scroll more if we have not reached our destination\n            if (currentX !== context.x || currentY !== context.y) {\n                w.requestAnimationFrame(step.bind(w, context));\n            }\n        }\n        /**\n     * scrolls window or element with a smooth behavior\n     * @method smoothScroll\n     * @param {Object|Node} el\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {undefined}\n     */ function smoothScroll(el, x, y) {\n            var scrollable;\n            var startX;\n            var startY;\n            var method;\n            var startTime = now();\n            // define scroll context\n            if (el === d.body) {\n                scrollable = w;\n                startX = w.scrollX || w.pageXOffset;\n                startY = w.scrollY || w.pageYOffset;\n                method = original.scroll;\n            } else {\n                scrollable = el;\n                startX = el.scrollLeft;\n                startY = el.scrollTop;\n                method = scrollElement;\n            }\n            // scroll looping over a frame\n            step({\n                scrollable: scrollable,\n                method: method,\n                startTime: startTime,\n                startX: startX,\n                startY: startY,\n                x: x,\n                y: y\n            });\n        }\n        // ORIGINAL METHODS OVERRIDES\n        // w.scroll and w.scrollTo\n        w.scroll = w.scrollTo = function() {\n            // avoid action when no arguments are passed\n            if (arguments[0] === undefined) {\n                return;\n            }\n            // avoid smooth behavior if not required\n            if (shouldBailOut(arguments[0]) === true) {\n                original.scroll.call(w, arguments[0].left !== undefined ? arguments[0].left : typeof arguments[0] !== \"object\" ? arguments[0] : w.scrollX || w.pageXOffset, // use top prop, second argument if present or fallback to scrollY\n                arguments[0].top !== undefined ? arguments[0].top : arguments[1] !== undefined ? arguments[1] : w.scrollY || w.pageYOffset);\n                return;\n            }\n            // LET THE SMOOTHNESS BEGIN!\n            smoothScroll.call(w, d.body, arguments[0].left !== undefined ? ~~arguments[0].left : w.scrollX || w.pageXOffset, arguments[0].top !== undefined ? ~~arguments[0].top : w.scrollY || w.pageYOffset);\n        };\n        // w.scrollBy\n        w.scrollBy = function() {\n            // avoid action when no arguments are passed\n            if (arguments[0] === undefined) {\n                return;\n            }\n            // avoid smooth behavior if not required\n            if (shouldBailOut(arguments[0])) {\n                original.scrollBy.call(w, arguments[0].left !== undefined ? arguments[0].left : typeof arguments[0] !== \"object\" ? arguments[0] : 0, arguments[0].top !== undefined ? arguments[0].top : arguments[1] !== undefined ? arguments[1] : 0);\n                return;\n            }\n            // LET THE SMOOTHNESS BEGIN!\n            smoothScroll.call(w, d.body, ~~arguments[0].left + (w.scrollX || w.pageXOffset), ~~arguments[0].top + (w.scrollY || w.pageYOffset));\n        };\n        // Element.prototype.scroll and Element.prototype.scrollTo\n        Element.prototype.scroll = Element.prototype.scrollTo = function() {\n            // avoid action when no arguments are passed\n            if (arguments[0] === undefined) {\n                return;\n            }\n            // avoid smooth behavior if not required\n            if (shouldBailOut(arguments[0]) === true) {\n                // if one number is passed, throw error to match Firefox implementation\n                if (typeof arguments[0] === \"number\" && arguments[1] === undefined) {\n                    throw new SyntaxError(\"Value could not be converted\");\n                }\n                original.elementScroll.call(this, // use left prop, first number argument or fallback to scrollLeft\n                arguments[0].left !== undefined ? ~~arguments[0].left : typeof arguments[0] !== \"object\" ? ~~arguments[0] : this.scrollLeft, // use top prop, second argument or fallback to scrollTop\n                arguments[0].top !== undefined ? ~~arguments[0].top : arguments[1] !== undefined ? ~~arguments[1] : this.scrollTop);\n                return;\n            }\n            var left = arguments[0].left;\n            var top = arguments[0].top;\n            // LET THE SMOOTHNESS BEGIN!\n            smoothScroll.call(this, this, typeof left === \"undefined\" ? this.scrollLeft : ~~left, typeof top === \"undefined\" ? this.scrollTop : ~~top);\n        };\n        // Element.prototype.scrollBy\n        Element.prototype.scrollBy = function() {\n            // avoid action when no arguments are passed\n            if (arguments[0] === undefined) {\n                return;\n            }\n            // avoid smooth behavior if not required\n            if (shouldBailOut(arguments[0]) === true) {\n                original.elementScroll.call(this, arguments[0].left !== undefined ? ~~arguments[0].left + this.scrollLeft : ~~arguments[0] + this.scrollLeft, arguments[0].top !== undefined ? ~~arguments[0].top + this.scrollTop : ~~arguments[1] + this.scrollTop);\n                return;\n            }\n            this.scroll({\n                left: ~~arguments[0].left + this.scrollLeft,\n                top: ~~arguments[0].top + this.scrollTop,\n                behavior: arguments[0].behavior\n            });\n        };\n        // Element.prototype.scrollIntoView\n        Element.prototype.scrollIntoView = function() {\n            // avoid smooth behavior if not required\n            if (shouldBailOut(arguments[0]) === true) {\n                original.scrollIntoView.call(this, arguments[0] === undefined ? true : arguments[0]);\n                return;\n            }\n            // LET THE SMOOTHNESS BEGIN!\n            var scrollableParent = findScrollableParent(this);\n            var parentRects = scrollableParent.getBoundingClientRect();\n            var clientRects = this.getBoundingClientRect();\n            if (scrollableParent !== d.body) {\n                // reveal element inside parent\n                smoothScroll.call(this, scrollableParent, scrollableParent.scrollLeft + clientRects.left - parentRects.left, scrollableParent.scrollTop + clientRects.top - parentRects.top);\n                // reveal parent in viewport unless is fixed\n                if (w.getComputedStyle(scrollableParent).position !== \"fixed\") {\n                    w.scrollBy({\n                        left: parentRects.left,\n                        top: parentRects.top,\n                        behavior: \"smooth\"\n                    });\n                }\n            } else {\n                // reveal element in viewport\n                w.scrollBy({\n                    left: clientRects.left,\n                    top: clientRects.top,\n                    behavior: \"smooth\"\n                });\n            }\n        };\n    }\n    if (true) {\n        // commonjs\n        module.exports = {\n            polyfill: polyfill\n        };\n    } else {}\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/smoothscroll-polyfill/dist/smoothscroll.js\n");

/***/ })

};
;